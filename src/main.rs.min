#[macro_use]
extern crate penrose;

use penrose::{
    core::{
        bindings::MouseEvent,
        config::Config,
        helpers::index_selectors,
        manager::WindowManager,
        layout::{bottom_stack, side_stack, Layout, LayoutConf},
        ring::Selector,
    },
    logging_error_handler,
    xcb::{new_xcb_backed_window_manager},
    Backward, Forward, Less, More,
};
use simplelog::{LevelFilter, SimpleLogger};

fn main() -> penrose::Result<()> {
    if let Err(e) = SimpleLogger::init(LevelFilter::Info, simplelog::Config::default()) {
        panic!("unable to set log level: {}", e);
    }

    let config = Config::default()
        .builder()
        .workspaces(vec!["1", "2", "3", "4", "5", "6", "7", "8", "9"])
        .layouts(vec![
            Layout::new("[side]", LayoutConf::default(), side_stack, 1, 0.6),
            Layout::new("[botm]", LayoutConf::default(), bottom_stack, 1, 0.6),
        ])
        .build()
        .unwrap();
    let hooks = vec![];

    let key_bindings = gen_keybindings! {
        "M-j" => run_internal!(cycle_client, Forward);
        "M-k" => run_internal!(cycle_client, Backward);
        "M-l" => run_internal!(rotate_clients, Forward);
        "M-h" => run_internal!(rotate_clients, Backward);
        "M-S-j" => run_internal!(drag_client, Forward);
        "M-S-k" => run_internal!(drag_client, Backward);
        "M-S-q" => run_internal!(kill_client);
        "M-S-f" => run_internal!(toggle_client_fullscreen, &Selector::Focused);
        "M-Tab" => run_internal!(toggle_workspace);
        "M-n" => run_internal!(cycle_workspace, Forward);
        "M-p" => run_internal!(cycle_workspace, Backward);
        "M-period" => run_internal!(cycle_screen, Forward);
        "M-comma" => run_internal!(cycle_screen, Backward);
        "M-S-period" => run_internal!(drag_workspace, Forward);
        "M-S-comma" => run_internal!(drag_workspace, Backward);
        "M-bracketright" => run_internal!(cycle_layout, Forward);
        "M-bracketleft" => run_internal!(cycle_layout, Backward);
        "M-A-k" => run_internal!(update_max_main, More);
        "M-A-j" => run_internal!(update_max_main, Less);
        "M-A-l" => run_internal!(update_main_ratio, More);
        "M-A-h" => run_internal!(update_main_ratio, Less);
        "M-Return" => run_external!("alacritty");
        "M-A-Escape" => run_internal!(exit);
        map: { "1", "2", "3", "4", "5", "6", "7", "8", "9" } to index_selectors(9) => {
            "M-{}" => focus_workspace (REF);
            "M-S-{}" => client_to_workspace (REF);
        };
    };

    let mouse_bindings = gen_mousebindings! {
        Press Right + [Meta] => |wm: &mut WindowManager<_>, _: &MouseEvent| wm.cycle_workspace(Forward),
        Press Left + [Meta] => |wm: &mut WindowManager<_>, _: &MouseEvent| wm.cycle_workspace(Backward)
    };

    let mut wm = new_xcb_backed_window_manager(config, hooks, logging_error_handler())?;
    wm.grab_keys_and_run(key_bindings, mouse_bindings)
}
